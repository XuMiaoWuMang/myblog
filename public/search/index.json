
        
        
        
        
        
        [{"categories":[],"content":"人在无语的时候真的会笑出来😄。\n重装系统了，虚拟机忘记备份了，所以就只好重新安装Ubuntu了。\n1. Ubuntu打开却直接花屏了！ 1.1. 问题 安装Ubuntu时，或者开机后出现花屏问题。\n1.2. 解决办法 解法一： 试试全屏VMware。\n解法二： 将你的Ubuntu关机，在上面的工具栏里找到虚拟机，选择设置中，选择显示，下方的图形内存，如果是最大了，就调小一点，反正随便调，启动之后是好的就行。\n解法三： 如果以上办法依旧无法解决，直接取消3D图形加速。\n2. Ubuntu在调用物理设备比如摄像头时，出现明显卡顿和花屏 2.1. 问题 在做linux环境编程实验时，执行sudo cheese调用摄像头，但是调用摄像头时发现画面要么一直加载一半不出来，要么出来的画面是花屏的，而且卡顿严重，导致无法使用。\n2.2. 解决办法 点击最上方的虚拟机，选择设置，然后选择硬件，选择USB控制器，选择USB 3.0，然后重启虚拟机，就可以了。\n当然，如果你已经选了USB 3.0，但是还是不行，那么就选择USB 2.0，乃至USB 1.0，然后重启虚拟机，就可以了。\n","permalink":"http://localhost:1313/posts/vmware%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/","tags":[],"title":"VMware安装过程和使用中遇到的坑"},{"categories":[],"content":"面对黑乎乎的命令行和靠左的菜单，是不是有点不适应呢？这里介绍一些美化的软件让你的Ubuntu更加美观，使用更加顺畅。\n如果修改过后发现用起来更卡了，建议卸载，毕竟用的流畅才能给人更好的体验！ 在进行以下操作之前，请给你的虚拟机做好快照，避免出现其他问题导致虚拟机损坏还无法复原。\n步骤 vim https://gitee.com/HGtz2222/VimForCpp\r如果你是Centos系统，试试这个吧！个人评价：最佳。但很可惜，只支持Centos。\n至于ubuntu的vim个性化设置，我了解的不多，如果你有好的推荐，欢迎留言！\n窗口 主要是实现窗口的亚克力效果，俗称半透明磨砂、毛玻璃\n执行：\nsudo apt install chrome-gnome-shell -y sudo apt install gnome-shell-extensions -y sudo apt install gnome-tweaks -y 火狐浏览器搜https://extensions.gnome.org\r。先点击蓝色(蓝粉色？)的窗口里的Click here to install browser extension，然后点击右上角的弹窗里的Continue to Insatllation，之后依旧是右上角点击Add，最后系统弹窗选Allow。\nBlur My Shell 安装 笔者写这篇文章时，该插件刚好更新，更新之后的插件好多功能修改了，甚至删除，其中就包括笔者最喜欢的一个，笔者的插件是2025年之前的版本。\n回到https://extensions.gnome.org页面，搜索 Blur My Shell ，进去之后点击OFF滑钮把他变成ON（如果没有说明上面的安装没有成功，重新安装一下），蓝色框框的右下角，Donate左边，然后点击Install。\n装好之后原本滑钮的位置会变成一个锥子和扳手交叉的图片，点击就可以启动。（没有的话刷新一下）\n点击最下方的Applications，右上角的滑钮点一下，让它拜托灰色状态。从上往下依次是：sigma = 模糊程度、Brightness = 亮度、Opacity = 透明度、取消当前窗口的半透明效果、全景模糊和全部窗口都开启半透明效果。一般都是开启倒数第三个和最后一个，前三个自己调到喜欢的程度就行。倒数第二个我没用过，不知道是啥。如果你开启了最后一个就可以不用做接下来的Add Windows了。\n然后下滑找到标题Whitelist，点击它右边的Add Windows，然后点击你要半透明的窗口，多点点，如果出现无法选中的情况就拖拽一下窗口，然后多Add几次就行。\n然后点击最下方的Dash，选择Dynamic，sigma调到0，Brightness调到1，这样可以让上面的时间哪里变透明。\n点击最下方的Panel，重复以上操作，就可以让你的任务栏也变透明。\n来到桌面，右键，点击Change background，然后选择Dark主题，下方的color选蓝色。（为啥选蓝色？我觉得般配就选了，如果你有其他喜欢的搭配就按你的来）\n点击左边的Ubuntu Desktop，来到Dock的Position on Screen，选择Bottom，这样你的Dock就会在屏幕底部，size调成你觉得合适的大小就行。\n卸载 回到https://extensions.gnome.org页面，点击锥子和扳手交叉的图片的右边的红叉叉就可以直接卸载。\n壁纸 如果你要静态壁纸的话，不如直接在Ubuntu的设置里设置。但是如果你要设置动态的壁纸的话，就安装fantascene-dynamic-wallpaper\r吧！\ncd ~ git clone https://gitee.com/liuminghang/fantascene-dynamic-wallpaper cd fantascene-dynamic-wallpaper sh start_deb.sh 安装完成之后，可以点击左下角的9个·，点击最右边的箭头来到右边，然后找到fantascene-dynamic-wallpaper，双击启动。\n事先准备好动态壁纸的mp4文件，然后在右上角有个fantascene-dynamic-wallpaper的小图标。双击即可打开，弹出的窗口中，点击File选择你的MP4文件或者直接粘贴路径，找到model，点击Add to startup Video aspect ratio左边的小方块，重启试试效果即可。\n终端 下载MesloLGSNF\r里的MesloLGS NF Bold Italic.ttf、MesloLGS NF Bold.ttf和MesloLGS NF Regular.ttf并安装。\ncd ~ git clone https://github.com/fontmgr/MesloLGSNF.git 打开MesloLGSNF文件夹，进入fonts文件夹，分别双击MesloLGS NF Bold Italic.ttf、MesloLGS NF Bold.ttf和MesloLGS NF Regular.ttf，然后点击窗口右上角的Install，安装完成之后重启终端即可。\n打开一个新的终端，点击右上角三条杠，点击Preferences，弹出的窗口中点击最左边的Unnamed，然后点击Custom font的左边的小方块启用，然后点击右边的大方块更改字体。在弹出的窗口中搜索MesloLGS，点击出来的MesloLGS NF，然后点击右上角的select。字体就完成了！\n请保存快照，因为以下步骤极其容易出错！\n安装zsh：\nsudo apt install zsh -y oh-my-zsh：\ncd ~/ sudo git clone https://github.com/robbyrussell/oh-my-zsh cd ~/oh-my-zsh/tools sudo sh install.sh exit 其他插件：\nsudo apt install zsh-autosuggestions sudo apt install zsh-syntax-highlighting sudo mv /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh /usr/share/zsh-autosuggestions/zsh-autosuggestions.plugin.zsh sudo mv /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.plugin.zsh sudo cp -r /usr/share/zsh-autosuggestions ~/oh-my-zsh/custom/plugins sudo cp -r /usr/share/zsh-syntax-highlighting ~/oh-my-zsh/custom/plugins sudo git clone https://github.com/romkatv/powerlevel10k ~/oh-my-zsh/themes/powerlevel10k sudo vim ~/.zshrc 然后会弹出vim窗口编辑文件，按i进入编辑模式，复制粘贴以下内容：\nexport ZSH=\u0026#34;$HOME/oh-my-zsh\u0026#34; ZSH_THEME=\u0026#34;powerlevel10k/powerlevel10k\u0026#34; plugins=(git zsh-autosuggestions zsh-syntax-highlighting) source /usr/share/zsh-autosuggestions/zsh-autosuggestions.plugin.zsh source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.plugin.zsh source $ZSH/oh-my-zsh.sh 然后esc退出编辑模式，输入:wq保存并退出vim。输入以下命令：\nsudo chmod 777 ~/.zshrc chsh -s /bin/zsh 输入完后重启。重启之后打开终端，会显示一堆英文，这说明以上步骤你都成功了。\n其实之后的步骤就全看个人喜好了，英语好的可以直接自立根生了，后面都是配置终端窗口的美化效果，比如测试终端能否正常显示字符，修改颜色，修改背景等等。\n未完待续……\n","permalink":"http://localhost:1313/posts/ubuntu%E7%BE%8E%E5%8C%96/","tags":[],"title":"Ubuntu美化"},{"categories":[],"content":"本地仓库的分支管理。\nGit篇: 分支管理 此文章编写于笔者刚开始学习git之时，所以不会有很多深奥的知识与历史，如有疏漏与错误，尽管联系笔者，我会及时修改，避免影响读者观感与知识理解。\n那么上一章我们已经学会了如何撤销删除文件或操作，接下来我们就来学习分支管理。\n如果你是高中生，那么你一定遇到过假期快结束了，作业却还有一大堆没写，如果有分身就好了，语数英各一个分身去写，本体负责玩。\n那么git的分支就与这个想法差不多，通过管理多个分支，最后与主分支合并，实现主分支不变，其他分支完成了不同功能的实现与测试。\n听起来就不错！\n分支策略 或者叫分支原则，意为在管理分支时所要遵守的原则。\nmaster或main分支必须是稳定！ 分支的存在使多人协作开发成为显示，但是master分支是不可以在多人协作中让一个人单独修改的，只能是团队发布的稳定的新版本，一般是线上环境，如app、网站等，是面向大众的！而其他分支则是内部协作人员的开发环境，方便测试和修改bug，修完bug之后再合并到master分支上发布。\n分支管理 查询 如果你想知道当前的主分支是哪条，那么就可以输入以下命令：\ngit branch 命令窗就会展示各个分支名，并在主分支前面标上一个*，让你明白谁才是老大主分支。\n储藏 如果你担心master被别人偷偷修改而你自己又不能时刻盯着的话，不妨试试保存当前所有未提交的修改吧，使用以下命令：\ngit stash 这个命令可以保存你当前的工作区所有未提交的修改，一般用于任务做到一半，却因为别的分支的事情，而不得不放弃当前分支，切换到其他分支。可以多次存储哦！git会将每一次的stash以栈的形式保存起来。\n实际开发中最好给stash加个message，用以下命令即可：\ngit stash save \u0026#34;\u0026#34; 双引号中填写message内容即可。\n那么，你就可以使用git stash保存下来，如果你还想接着写可以用以下命令：\ngit stash pop 像栈一样pop出来。就可以恢复工作区的修改了。\n如果你要查看现有的stash，可以使用以下命令：\ngit stash list 需要注意的是，stash只会保存你修改过的文件，没有修改过的文件和新添加的文件是不会保存的(被忽略的文件也是不会被保存的)\n能用就行，太多的暂时就不必学了。\n被忽略的文件指的是有.gitignore文件中所包含的文件名或目录，这个后面再写。\n创建 如果你想创建一个dev分支，则可以使用以下命令：\ngit branch dev 切换 如果你想切换主分支为dev，则可以使用以下命令：\ngit checkout dev 也许你会不理解，主分支怎么可以切换呢？就像是本体和分身的身份怎么能切换？然而，git对于主分支的概念并不一样，主分支并不是独一无二的，它是由HEAD指针来指向的，HEAD指向谁，谁就是git概念上的主分支。\n而我们在实际开发和使用过程中，通常会固定使用main或者master来充当本体，分支对应的功能开发和测试完毕再合并到主分支中，就像是分身把它写完的作业给你一样。\n创建并切换 如果你想创建一个dev分支并切换到dev分支上，你可以使用以下命令：\ngit chechout -b dev 唯一的优点是简洁，毕竟一行命令就解决了。\n合并 如果你想把dev分支合并到master分支上，你可以使用以下命令：\ngit checkout master git merge dev 第一行表示切换master为主分支(本体)\n第二行表示把分支dev(分身)合并到master上。\n情况一：只有dev分支更新了 其合并模式为——Fast-forword，它是直接把master指向了dev所指向的版本，以此来快速合并。\n情况二：dev和master分支都更新了 如果dev和master对相同的地方做了不同的修改，那么此时就会发生合并冲突。\n假如原本有关readme文件，dev分支中它被添加了abc，master分支中它被添加了123。那么，此时git不知道也不能决定该保留水，那么此时就会发生合并冲突，并输出出来冲突的地方在readme文件。\n而readme文件早已不是原本的模样了，原本abc或者123所在的地方已经变成了：\n\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD 123 ======= abc \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; dev \u0026laquo;\u0026lt;和===之间的内容是master分支所修改的内容，而===和\u0026raquo;\u0026gt;之间的内容是dev分支所修改的内容。\n只需要保留目标内容其他的都删掉即可，比如我们要保留dev分支所修改的内容，那么readme里的内容应该是：\nabc 然后再使用add和commit命令重新提交冲突的地方即可。\n合并总结： 情况一可以快速合并，也就是git自动帮我们合并了，而情况二就需要我们手动合并了，手动合并不要忘了再提交一次！！！\n想更直观地了解情况二的合并流程可以使用\ngit log --graph --abbrev-commit --pretty=one 第三个参数(\u0026ndash;pretty=one)只会显示版本ID、分支名(如果是主分支则不显示)和commit内容。\n不带则会显示作者名、邮箱和时间等内容。\n！！！时间线是从下往上的！！！\n需注意，对于情况一，该命令是无法区分是合并操作还是直接提交操作的，如果以后出现了问题，想要查看日志追责时就可能查不到，万一你在那个时间也merge了，你就可能背一部分锅了。所以，我们对于情况一需要换一种命令：\ngit merge --no-ff -m \u0026#34;\u0026#34; dev 双引号里添加的你提交的信息，\u0026ndash;no-ff表示不要fast-forword模式合并。\n删除 删除分为两种，一种是分支已经被其他分支合并(merge)了，所以用普通删除，另一种是分支还在使用中，没有被完全合并(merge)，所以我们用强制删除。\n如果你想删除dev分支，则可以使用以下命令：\ngit checkout master git branch -d dev git branch 第一行表示切换到master分支。\n第二行表示删除dev分支。\n第三行表示验尸查看所有的分支名和主分支。\n为什么要切换到master分支再删除呢？——因为不能在dev分支里删除dev分支。就像你不能双手把自己举起来一样。\n强制删除只是把-d改成-D就好，命令如下：\ngit checkout master git branch -D dev git branch 由于创建、合并和删除分支很快，所以我们可以先创建分支，在分支上完成某项功能，实现成功之后再合并该分支，然后再删除分支。也许你可以说这是多此一举，毕竟这和在main分支直接操作的效果是一样的。而这种操作实际上就只是比直接在master分支上直接操作更安全罢了。但是我喜欢卸磨杀驴\n建议 在实际开发中，每个人都负责自己分支，实现多人共同协作，但是，如果说今天master出bug了，其他协作人员快速修好上线，但是，你的分支是昨天创建的，明天才能开发完，那么，你能直接在master分支合并你的分支吗？\n不行！！！因为master的代码都是改过的！你不知道是否会有修改冲突的地方，也许你会说，那我再按照合并情况二\r来修改不就好了？那我问你，你敢保证你改过之后不会出现新的bug吗？\n所以，最好先合并master到你的分支中，在你的分支上修修改改，这样即不会影响master又可以随心所欲地改代码。\n最后再合并到master上。\n","permalink":"http://localhost:1313/posts/git%E7%AF%873%E4%B9%8B%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/","tags":[],"title":"Git篇(3): 分支管理"},{"categories":[],"content":"撤销或回退版本，删除文件的方法。\nGit篇: 撤销和删除 此文章编写于笔者刚开始学习git之时，所以不会有很多深奥的知识与历史，如有疏漏与错误，尽管联系笔者，我会及时修改，避免影响读者观感与知识理解。\n在上一篇文章中，我们已经学会了如何简单添加本地的git仓库，接下来，我们将深入学习如何使用git来管理我们本地仓库的代码。\n在开始之前，我希望大家明确一个小小的时间线。\n即：版本库是最旧的，工作区是最新的，而暂存区在二者之间。\n撤销修改 在日常生活中，我们常常会遇到一些错误，比如，我们不小心说错了话，做错了事，我们总是会想，要是我没***，要是我不***……之类的想法，这种想法在使用git时也是非常常见的，接下来，我们就来学习一下如何撤销修改。\n为了只观的看出不同方法的差别和其应对情况，以下表格请认真查看：\n首先，我们先后往工作区中添加了git和code文件，随后执行了add和commit命令，所以我们的工作区、暂存区和版本库都有了相同的文件，即git文件和code文件。\n各种方法撤回修改 对于reset方法： HEAD是指版本库目前所在的版本，后面的n表示的是你想回退几次版本，回退到上一个版本的话，n=1。\ngit reset [--option] HEAD~n \u0026ndash;soft：回退到指定版本，保留工作区和暂存区，不删除工作区的修改。\n\u0026ndash;mixed：回退到指定版本，保留工作区，删除暂存区的修改。\n\u0026ndash;hard：回退到指定版本，删除工作区和暂存区的修改。\n工作区（git code） 暂存区（git code） 版本库（git code） reset选项 git code git code git \u0026ndash;soft git code git git \u0026ndash;mixed (默认选项) git git git \u0026ndash;hard(慎用) 解释：由于是先添加git文件，然后添加code文件，所以，code文件是新的，git文件是旧的，而给--soft就是让版本库回到旧状态，即只有git的时候。--mixed就是让版本库和暂存区都回到旧状态。--hard就是让版本库、暂存区和工作区都回到旧状态。\n当然，你也可以直接使用git reset HEAD，默认就是--mixed选项。\n使用git reflog可以查看历史记录，包括各种回退记录都能看到。\n对于checkout \u0026ndash;方法： git checkout -- \u0026lt;file id\u0026gt;可以撤销工作区中指定文件的修改，适合精细化操作，对单个文件撤销。\n对于各种情况的撤销修改 如果说上个版本只有git代码，而code代码则是作为新增文件存在同时也是我们要撤回的代码，那么我们面对不同的情况，可以进行以下操作：\n目的 工作区（git code） 暂存区（git code） 版本库（git code） 操作 撤销工作区中的内容 git code checkout \u0026ndash; 撤销工作区、暂存区中的内容 git code git code (reset \u0026ndash;mixed搭配checkout \u0026ndash;) 或者reset \u0026ndash;hard 撤销工作区、暂存区和版本库中的内容 git code git code git code reset \u0026ndash;hard 撤销暂存区、版本库中的内容 git code reset \u0026ndash;mixed 撤销版本库中的内容 git code reset \u0026ndash;soft 删除文件 在git中，删除文件也是一个非常常见的操作，接下来，我们就来学习一下如何删除文件。\n删除工作区中的文件 方法一： 使用rm \u0026lt;file\u0026gt;可以删除工作区中的文件，但是，此时版本库和暂存区中的文件并没有被删除，所以，我们需要使用git add \u0026lt;file\u0026gt;来将删除操作添加到暂存区，随后使用git commit -m \u0026quot;删除文件\u0026quot;来将删除操作提交到版本库。\n方法二： 使用git rm \u0026lt;file\u0026gt;可以删除版本库中的文件，此时，工作区和暂存区中的文件也会被删除，所以，我们不需要再使用git add \u0026lt;file\u0026gt;来将删除操作添加到暂存区，随后使用git commit -m \u0026quot;删除文件\u0026quot;来将删除操作提交到版本库。\n其他的删除其他区的操作这里就不展开了，比如git reset HEAD \u0026lt;file\u0026gt;，毕竟本系列主打一个能用就行。\n总结 本篇文章主要讲述了如何撤销修改和删除文件，希望对大家有所帮助。\n","permalink":"http://localhost:1313/posts/git%E7%AF%872%E4%B9%8B%E6%92%A4%E9%94%80%E5%92%8C%E5%88%A0%E9%99%A4/","tags":[],"title":"Git篇(2): 撤销和删除"},{"categories":[],"content":"创建并简单管理本地仓库的方法。\nGit篇: 创建与添加 此文章编写于笔者刚开始学习git之时，所以不会有很多深奥的知识与历史，如有疏漏与错误，尽管联系笔者，我会及时修改，避免影响读者观感与知识理解。本系列文章不会太过深究git如何运作，各个操作的隐性机制，主打一个能用就行。\n一言以蔽之：git是一种版本管理器。\n如果你是一名大学生，你想写一个图书管理系统作为毕设，但是给导师看了之后发现这个系统极其简陋，只有登入和注册功能，导师要求你增加图书检索功能。增加之后，导师说不要全字匹配，要模糊匹配。修改之后，导师又说我全都要。\n毫无疑问，此时的你已经把全字匹配的代码删的一干二净了，你现在急需时光机回到修改之前。一听就让人头大，于是git作为解决这种情况的工具横空出世!\n准备工作 安装 只需复制这行代码到linux中然后一路敲回车键即可获得git。\n注意！apt是ubuntu的包管理器，类似于应用商店，但是linux的发行版不只有ubuntu，类似像CentOS的包管理器是yum等，所以，在复制代码时请一定先去看看自己是什么发行版，包管理器是什么。唯一需要变的就是代码里的apt，如果账户不是root用户则需要加上sudo，其他的大差不差。\nsudo apt install git 卸载 与使用差不多，唯一变了的就是install，变成了remove。\nsudo apt remove git 初始化 在初始化操作之前，请先决定好自己git下来的目录，新建一个目录用于保存git下来的各种文件和代码，这个目录又叫仓库。\nmkdir [目录名] 先对git初始化,git初始化会在当前目录下新建一个.git隐藏目录。\n如非必要，不要修改.git目录下的任何内容，除非你是git高手。\ngit init 如果对这个隐藏目录好奇可以用tree .git/来直观地看。\n配置用户名与邮箱 用户名与邮箱一般是指github上的账号和邮箱，国内也有类似的，比如gitee或者gitcode，按需修改用户名和邮箱。以下两行代码可以让你指定__该仓库__的用户名和邮箱。\ngit config user.name \u0026#34;xumiao\u0026#34; git config user.email \u0026#34;xumiao@email.com\u0026#34; 我怎么知道我修改成功与否呢？用以下命令即可。\ngit config -l 如果想要将其置空，则可以使用以下命令来置空。\ngit config --unset user.name git config --unset user.email 还有一种办法可以快速的对所有仓库配置用户名与邮箱，那就是以下命令：\ngit config --global user.name \u0026#34;xumiao\u0026#34; git config --global user.email \u0026#34;xumiao@email.com\u0026#34; 请注意，使用了--global命令配置的用户名是不会被上述命令置空和修改的。\n对应的置空命令为：\ngit config --global --unset user.name git config --global --unset user.email 如果你够细心的话就会发现，没加--global的用户名在git config -l的最下面，加了global的用户名则在git config -l的最上面。\n走到这里，你已经完成了git仓库的初始化了，接下来就是用git简单地管理仓库内的各种文件了！\n使用 毫无疑问，前置工作都已完成，那么接下来就是重要的git的真正的使用方法了。\n除非你是git高手，不然的话不要手动修改.git隐藏目录！包括之后你往这个仓库里添加的各种文件与代码都不要放到.git中！\n我们将仓库目录下除.git文件外的所有空间称作工作区。\n修改与保存 git的add功能只能让修改的文件与代码暂时存在暂存区，它并__不会__将修改的内容提交到__master分支__下。\n你可以使用add命令，为了应对你后悔的情况，它只会将你修改完的东西放到.git文件的暂存区中。你可以add后面一次接多个文件名或者是多个文件夹，也可以加个.，它都会将对应的文件保存在暂存区中，区别在于一个是无脑将当前目录下的所有文件都放到暂存区中，一个是精细化地将对应的文件放入暂存区中。\ngit add [./file-name/...] 使用commit命令，将仓库真正修改！\n-m是必须有的！后面接双引号，是表示这次你做了什么，但是，这个是你自己填写的，相当于注释，方便以后想要找到特定版本时能够快速定位。\ngit commit -m \u0026#34;注释\u0026#34; 使用log命令，打印日志，方便找到对应的版本及其ID。--pretty=one可以只打印ID和对应的注释，舍去修改者和时间，方便根据注释找特定版本。\ncommit后面对应的就是版本的ID，是十六进制哈希值，HEAD指向最新版本\ngit log git log --pretty=one 查看仓库状态 git status 结尾 好了，你已经会创建和添加git仓库的基本操作了，去创建属于你的本地仓库吧！\n","permalink":"http://localhost:1313/posts/git%E7%AF%871%E4%B9%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E6%B7%BB%E5%8A%A0/","tags":[],"title":"Git篇(1): 创建与添加"},{"categories":[],"content":"","permalink":"http://localhost:1313/manifest.json","tags":[],"title":""}]