
        
        
        [{"categories":[],"content":"Git篇: 撤销和删除 此文章编写于笔者刚开始学习git之时，所以不会有很多深奥的知识与历史，如有疏漏与错误，尽管联系笔者，我会及时修改，避免影响读者观感与知识理解。\n在上一篇文章中，我们已经学会了如何简单添加本地的git仓库，接下来，我们将深入学习如何使用git来管理我们本地仓库的代码。\n在开始之前，我希望大家明确一个小小的时间线。\n即：版本库是最旧的，工作区是最新的，而暂存区在二者之间。\n撤销修改 在日常生活中，我们常常会遇到一些错误，比如，我们不小心说错了话，做错了事，我们总是会想，要是我没***，要是我不***……之类的想法，这种想法在使用git时也是非常常见的，接下来，我们就来学习一下如何撤销修改。\n为了只观的看出不同方法的差别和其应对情况，以下表格请认真查看：\n首先，我们先后往工作区中添加了git和code文件，随后执行了add和commit命令，所以我们的工作区、暂存区和版本库都有了相同的文件，即git文件和code文件。\n各种方法撤回修改 对于reset方法： \u0026ndash;soft：回退到指定版本，保留工作区和暂存区，不删除工作区的修改。\n\u0026ndash;mixed：回退到指定版本，保留工作区，删除暂存区的修改。\n\u0026ndash;hard：回退到指定版本，删除工作区和暂存区的修改。\n工作区（git code） 暂存区（git code） 版本库（git code） reset选项 git code git code git \u0026ndash;soft git code git git \u0026ndash;mixed (默认选项) git git git \u0026ndash;hard(慎用) 解释：由于是先添加git文件，然后添加code文件，所以，code文件是新的，git文件是旧的，而给--soft就是让版本库回到旧状态，即只有git的时候。--mixed就是让版本库和暂存区都回到旧状态。--hard就是让版本库、暂存区和工作区都回到旧状态。\n当然，你也可以直接使用git reset HEAD，默认就是--mixed选项。\n使用git reflog可以查看历史记录，包括各种回退记录都能看到。\n对于checkout \u0026ndash;方法： git checkout -- \u0026lt;file\u0026gt;可以撤销工作区中指定文件的修改，适合精细化操作，对单个文件撤销。\n对于各种情况的撤销修改 如果说上个版本只有git代码，而code代码则是作为新增文件存在同时也是我们要撤回的代码，那么我们面对不同的情况，可以进行以下操作：\n目的 工作区（git code） 暂存区（git code） 版本库（git code） 操作 撤销工作区中的内容 git code git git checkout \u0026ndash; 撤销工作区、暂存区中的内容 git code git code git (reset \u0026ndash;mixed搭配checkout \u0026ndash;) 或者reset \u0026ndash;hard 撤销工作区、暂存区和版本库中的内容 git code git code git code reset \u0026ndash;hard 撤销暂存区、版本库中的内容 git code git code reset \u0026ndash;mixed 撤销版本库中的内容 git code reset \u0026ndash;soft 删除文件 在git中，删除文件也是一个非常常见的操作，接下来，我们就来学习一下如何删除文件。\n删除工作区中的文件 方法一： 使用rm \u0026lt;file\u0026gt;可以删除工作区中的文件，但是，此时版本库和暂存区中的文件并没有被删除，所以，我们需要使用git add \u0026lt;file\u0026gt;来将删除操作添加到暂存区，随后使用git commit -m \u0026quot;删除文件\u0026quot;来将删除操作提交到版本库。\n方法二： 使用git rm \u0026lt;file\u0026gt;可以删除版本库中的文件，此时，工作区和暂存区中的文件也会被删除，所以，我们不需要再使用git add \u0026lt;file\u0026gt;来将删除操作添加到暂存区，随后使用git commit -m \u0026quot;删除文件\u0026quot;来将删除操作提交到版本库。\n其他的删除其他区的操作这里就不展开了，比如git reset HEAD \u0026lt;file\u0026gt;，毕竟本系列主打一个能用就行。\n总结 本篇文章主要讲述了如何撤销修改和删除文件，希望对大家有所帮助。\n","permalink":"http://localhost:1313/posts/git%E7%AF%872%E4%B9%8B%E6%92%A4%E9%94%80%E5%92%8C%E5%88%A0%E9%99%A4/","tags":[],"title":"Git篇(2): 撤销和删除"},{"categories":[],"content":"Git篇: 创建与添加 此文章编写于笔者刚开始学习git之时，所以不会有很多深奥的知识与历史，如有疏漏与错误，尽管联系笔者，我会及时修改，避免影响读者观感与知识理解。本系列文章不会太过深究git如何运作，各个操作的隐性机制，主打一个能用就行。\n一言以蔽之：git是一种版本管理器。\n如果你是一名大学生，你想写一个图书管理系统作为毕设，但是给导师看了之后发现这个系统极其简陋，只有登入和注册功能，导师要求你增加图书检索功能。增加之后，导师说不要全字匹配，要模糊匹配。修改之后，导师又说我全都要。\n毫无疑问，此时的你已经把全字匹配的代码删的一干二净了，你现在急需时光机回到修改之前。一听就让人头大，于是git作为解决这种情况的工具横空出世!\n准备工作 安装 只需复制这行代码到linux中然后一路敲回车键即可获得git。\n注意！apt是ubuntu的包管理器，类似于应用商店，但是linux的发行版不只有ubuntu，类似像CentOS的包管理器是yum等，所以，在复制代码时请一定先去看看自己是什么发行版，包管理器是什么。唯一需要变的就是代码里的apt，如果账户不是root用户则需要加上sudo，其他的大差不差。\nsudo apt install git 卸载 与使用差不多，唯一变了的就是install，变成了remove。\nsudo apt remove git 初始化 在初始化操作之前，请先决定好自己git下来的目录，新建一个目录用于保存git下来的各种文件和代码，这个目录又叫仓库。\nmkdir [目录名] 先对git初始化,git初始化会在当前目录下新建一个.git隐藏目录。\n如非必要，不要修改.git目录下的任何内容，除非你是git高手。\ngit init 如果对这个隐藏目录好奇可以用tree .git/来直观地看。\n配置用户名与邮箱 用户名与邮箱一般是指github上的账号和邮箱，国内也有类似的，比如gitee或者gitcode，按需修改用户名和邮箱。以下两行代码可以让你指定__该仓库__的用户名和邮箱。\ngit config user.name \u0026#34;xumiao\u0026#34; git config user.email \u0026#34;xumiao@email.com\u0026#34; 我怎么知道我修改成功与否呢？用以下命令即可。\ngit config -l 如果想要将其置空，则可以使用以下命令来置空。\ngit config --unset user.name git config --unset user.email 还有一种办法可以快速的对所有仓库配置用户名与邮箱，那就是以下命令：\ngit config --global user.name \u0026#34;xumiao\u0026#34; git config --global user.email \u0026#34;xumiao@email.com\u0026#34; 请注意，使用了--global命令配置的用户名是不会被上述命令置空和修改的。\n对应的置空命令为：\ngit config --global --unset user.name git config --global --unset user.email 如果你够细心的话就会发现，没加--global的用户名在git config -l的最下面，加了global的用户名则在git config -l的最上面。\n走到这里，你已经完成了git仓库的初始化了，接下来就是用git简单地管理仓库内的各种文件了！\n使用 毫无疑问，前置工作都已完成，那么接下来就是重要的git的真正的使用方法了。\n除非你是git高手，不然的话不要手动修改.git隐藏目录！包括之后你往这个仓库里添加的各种文件与代码都不要放到.git中！\n我们将仓库目录下除.git文件外的所有空间称作工作区。\n修改与保存 git的add功能只能让修改的文件与代码暂时存在暂存区，它并__不会__将修改的内容提交到__master分支__下。\n你可以使用add命令，为了应对你后悔的情况，它只会将你修改完的东西放到.git文件的暂存区中。你可以add后面一次接多个文件名或者是多个文件夹，也可以加个.，它都会将对应的文件保存在暂存区中，区别在于一个是无脑将当前目录下的所有文件都放到暂存区中，一个是精细化地将对应的文件放入暂存区中。\ngit add [./file-name/...] 使用commit命令，将仓库真正修改！\n-m是必须有的！后面接双引号，是表示这次你做了什么，但是，这个是你自己填写的，相当于注释，方便以后想要找到特定版本时能够快速定位。\ngit commit -m \u0026#34;注释\u0026#34; 使用log命令，打印日志，方便找到对应的版本及其ID。--pretty=one可以只打印ID和对应的注释，舍去修改者和时间，方便根据注释找特定版本。\ncommit后面对应的就是版本的ID，是十六进制哈希值，HEAD指向最新版本\ngit log git log --pretty=one 查看仓库状态 git status 结尾 好了，你已经会创建和添加git仓库的基本操作了，去创建属于你的本地仓库吧！\n","permalink":"http://localhost:1313/posts/git%E7%AF%871%E4%B9%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E6%B7%BB%E5%8A%A0/","tags":[],"title":"Git篇(1): 创建与添加"},{"categories":[],"content":"","permalink":"http://localhost:1313/manifest.json","tags":[],"title":""}]